Parameters:
  Environment:
    Default: pre
    Description: Name of the environment prefix
    Type: String
  ConfigBucketName:
    Description: Name of the S3 bucket where the AWS Config snapshots are stored.
    Type: String
  S3EventNotification:
    Default: "No"
    Description: Create a helper lambda function to create the s3 event notification
    Type: String
  EventNotificationLambdaFunctionName:
    Default: create_s3_event_notification
    Description: Name for the Lambda function that will create an s3 event notification.
    Type: String
  EventNotificationLambdaRoleName:
    Default: create_s3_event_notification_role
    Description: Name for the IAM role to be created.
    Type: String
  PartitionAthenaTableLambdaFunctionName:
    Default: aws_config_bucket_events
    Description: Name for the Lambda function that will partition the athena table every time AWS Config stores a snapshot to s3
    Type: String
  PartitionAthenaTableLambdaRoleName:
    Default: aws_config_bucket_events_role
    Description: Name for the IAM role to be created.
    Type: String
  DatabaseName:
    Default: awsconfig
    Description: Name of the existing database.
    Type: String
  TableName:
    Default: aws_config_configuration_snapshot
    Description: Name of the existing database table.
    Type: String

Conditions:
  CreateS3EventNotification:
    Fn::Equals:
      - !Ref S3EventNotification
      - "Yes"

Resources:
  CreateS3EventNotificationLambdaRole:
    Type: AWS::IAM::Role
    Condition: CreateS3EventNotification
    Metadata:
      aws:cdk:path: QsStack/PartitionAthenaTableLambdaRole/Resource
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Path: /
      RoleName: !Join
        - ""
        - - Ref: Environment
          - "-"
          - Ref: EventNotificationLambdaRoleName
      Policies:
        - PolicyName: CreateEventNotificationLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - lambda:GetFunction
                  - s3:PutBucketNotificationConfiguration
                Effect: Allow
                Resource: "*"
              - Action:
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                  - athena:StopQueryExecution
                Effect: Allow
                Resource: "*"

  CreateS3EventNotificationLambda:
    Type: AWS::Lambda::Function
    Condition: CreateS3EventNotification
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.11
      Role:
        Fn::GetAtt:
          - CreateS3EventNotificationLambdaRole
          - Arn
      Code:
        ZipFile: |
          import boto3

          def lambda_handler(event, context):
              # Extract parameters from the event
              bucket_name = event['ResourceProperties']['BucketName']
              lambda_function_arn = event['ResourceProperties']['LambdaFunctionArn']

              # Initialize a session using provided profile and region
              session = boto3.Session()

              # Get the Lambda function ARN and configure the notification
              lambda_client = session.client('lambda')
              lambda_response = lambda_client.get_function(FunctionName=lambda_function_arn)
              
              notification_configuration = {
                  'LambdaFunctionConfigurations': [
                      {
                          'LambdaFunctionArn': lambda_response['Configuration']['FunctionArn'],
                          'Events': ['s3:ObjectCreated:*']
                      }
                  ]
              }

              # Update the bucket's notification configuration
              s3_client = session.client('s3')
              s3_client.put_bucket_notification_configuration(
                  Bucket=bucket_name,
                  NotificationConfiguration=notification_configuration
              )

              # Return success to CloudFormation
              return {
                  'Status': 'SUCCESS',
                  'PhysicalResourceId': 'CustomResource',
                  'Data': {}
              }

  CreateS3EventNotificationCustomResource:
    Type: Custom::CreateBucketEventNotification
    Condition: CreateS3EventNotification
    Properties:
      ServiceToken: !GetAtt CreateS3EventNotificationLambda.Arn
      BucketName: !Ref ConfigBucketName
      LambdaFunctionArn: !GetAtt CreateS3EventNotificationLambda.Arn

  PartitionAthenaTableLambdaRole:
    Type: AWS::IAM::Role
    Metadata:
      aws:cdk:path: QsStack/PartitionAthenaTableLambdaRole/Resource
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Path: /service-role/
      RoleName: !Join
        - ""
        - - Ref: Environment
          - "-"
          - Ref: PartitionAthenaTableLambdaRoleName
      Policies:
        - PolicyName: PartitionAthenaTableLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: logs:CreateLogGroup
                Effect: Allow
                Resource: !Join
                  - ""
                  - - "arn:aws:logs:"
                    - !Ref AWS::Region
                    - ":"
                    - !Ref AWS::AccountId
                    - ":*"
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Join
                  - ""
                  - - "arn:aws:logs:"
                    - !Ref AWS::Region
                    - ":"
                    - !Ref AWS::AccountId
                    - ":log-group:/aws/lambda/*"

  PartitionAthenaTableLambda:
    Type: AWS::Lambda::Function
    Metadata:
      aws:cdk:path: QsStack/PartitionAthenaTableLambda/Resource
    Properties:
      Architectures:
        - x86_64
      Environment:
        Variables:
          DATABASE_NAME: !Ref DatabaseName
          TABLE_NAME: !Ref TableName
      Code:
        ZipFile: |
          import datetime
          import re
          import boto3
          import os

          # TABLE_NAME = 'aws_config_configuration_snapshot'
          # DATABASE_NAME = 'sampledb'

          TABLE_NAME = os.environ['TABLE_NAME']
          DATABASE_NAME = os.environ['DATABASE_NAME']

          ACCOUNT_ID = None # Determined at runtime
          LATEST_PARTITION_VALUE = 'latest'

          athena = boto3.client('athena')

          def lambda_handler(event, context):
              global ACCOUNT_ID

              object_key = event['Records'][0]['s3']['object']['key']
              match = get_configuration_snapshot_object_key_match(object_key)
              if match is None:
                  print('Ignoring event for non-configuration snapshot object key', object_key)
                  return
              print('Adding partitions for configuration snapshot object key', object_key)
              
              ACCOUNT_ID = context.invoked_function_arn.split(':')[4]
              object_key_parent = 's3://{bucket_name}/{object_key_parent}/'.format(
                  bucket_name=event['Records'][0]['s3']['bucket']['name'],
                  object_key_parent=os.path.dirname(object_key))
              configuration_snapshot_accountid = get_configuration_snapshot_accountid(match)
              configuration_snapshot_region = get_configuration_snapshot_region(match)
              configuration_snapshot_date = get_configuration_snapshot_date(match)
              
              drop_partition(configuration_snapshot_accountid, configuration_snapshot_region, LATEST_PARTITION_VALUE)
              add_partition(configuration_snapshot_accountid, configuration_snapshot_region, LATEST_PARTITION_VALUE, object_key_parent)
              add_partition(configuration_snapshot_accountid, configuration_snapshot_region, get_configuration_snapshot_date(match).strftime('%Y-%m-%d'), object_key_parent)
              
          def get_configuration_snapshot_object_key_match(object_key):
              # Matches object keys like AWSLogs/123456789012/Config/us-east-1/2018/4/11/ConfigSnapshot/123456789012_Config_us-east-1_ConfigSnapshot_20180411T054711Z_a970aeff-cb3d-4c4e-806b-88fa14702hdb.json.gz
              return re.match('AWSLogs/(\d+)/Config/([\w-]+)/(\d+)/(\d+)/(\d+)/ConfigSnapshot/[^\\\]+$', object_key)

          def get_configuration_snapshot_accountid(match):
              print('AccountId:', match.group(1))
              return match.group(1)

          def get_configuration_snapshot_region(match):
              return match.group(2)

          def get_configuration_snapshot_date(match):
              return datetime.date(int(match.group(3)), int(match.group(4)), int(match.group(5)))
              
          def add_partition(accountid_partition_value, region_partition_value, dt_partition_value, partition_location):
              execute_query('ALTER TABLE {table_name} ADD PARTITION {partition} location \'{partition_location}\''.format(
                  table_name=TABLE_NAME,
                  partition=build_partition_string(accountid_partition_value, region_partition_value, dt_partition_value),
                  partition_location=partition_location))
                  
          def drop_partition(accountid_partition_value, region_partition_value, dt_partition_value):
              execute_query('ALTER TABLE {table_name} DROP PARTITION {partition}'.format(
                  table_name=TABLE_NAME,
                  partition=build_partition_string(accountid_partition_value, region_partition_value, dt_partition_value)))
                  
          def build_partition_string(accountid_partition_value, region_partition_value, dt_partition_value):
              return "(accountid='{accountid_partition_value}', dt='{dt_partition_value}', region='{region_partition_value}')".format(
                accountid_partition_value=accountid_partition_value,
                  dt_partition_value=dt_partition_value,
                  region_partition_value=region_partition_value)

          def execute_query(query):
              print('Executing query:', query)
              query_output_location = 's3://aws-athena-query-results-{account_id}-{region}'.format(
                  account_id=ACCOUNT_ID,
                  region=os.environ['AWS_REGION'])
              start_query_response = athena.start_query_execution(
                  QueryString=query,
                  QueryExecutionContext={
                      'Database': DATABASE_NAME
                  },
                  ResultConfiguration={
                      'OutputLocation': query_output_location,
                  }
              )
              print('Query started')
              
              is_query_running = True
              while is_query_running:
                  get_query_execution_response = athena.get_query_execution(
                      QueryExecutionId=start_query_response['QueryExecutionId']
                  )
                  query_state = get_query_execution_response['QueryExecution']['Status']['State']
                  is_query_running = query_state in ('RUNNING','QUEUED')
                  
                  if not is_query_running and query_state != 'SUCCEEDED':
                      raise Exception('Query failed')
              print('Query completed')
      Description: Function for partitioning AWS Config data from a s3 bucket
      FunctionName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - "-"
            - Ref: PartitionAthenaTableLambdaFunctionName
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - PartitionAthenaTableLambdaRole
          - Arn
      Runtime: python3.11
      Timeout: 60

  PartitionAthenaTableLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PartitionAthenaTableLambda.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - !Ref ConfigBucketName
